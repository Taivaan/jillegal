{"name":"Jillegal","tagline":"Java Off Heap Object Pool and On the Fly Instrumentation Tool","body":"1. What is Jillegal?\r\n==============\r\n\r\n**Jillegal** is a library including unknown tricks of Java. It abstracts developer from low-level details to implement those tricks. Its design and logic are based on **Java 8** so it can be used at only **_Java 8 platform_**. Java 6 and Java 7 supports are in progress and as soon as possible they will be released. Demo application is avaiable at [https://github.com/serkan-ozal/jillegal-demo](https://github.com/serkan-ozal/jillegal-demo). \r\n\r\nCurrently it has two main module: **OffHeap**  and **Instrumentation**. \r\n\r\n1.1. OffHeap Module\r\n-------\r\nDesign and logic of Jillegal OffHeap module different from all of the other offheap frameworks. It doesn't serilalize/deserialize objects to/from allocated offheap memory region. Becuase objects already lives on offheap and GC doesn't track them :). With this feature, all objects in pool are exist as sequential at memory, so sequential accessing to them is faster. Because, they will be fetched to CPU cache together as limited size of CPU cache.\r\n\r\n1.2. Instrumentation Module\r\n-------\r\n\r\nInstrumenting and redefining any Java class, interface, ... (even core Java classes) at runtime with developer friendly API (with Builder Pattern based design) is supported. You can add your custom pre/post listeners to method and constructor invocations dynamically. It serves a platform to develop your custom AOP framework. It uses Java Instrumentation API but adding extra VM argument (like `-javaagent:<jarpath>[=<options>]` is not required. **Jillegal** has its own internal agent and it can enable it's agent at runtime dynamically.\r\n\r\n2. Compile and Build\r\n=======\r\n\r\n1. First clone code from GitHub.\r\n   `git clone https://github.com/serkan-ozal/jillegal.git`\r\n\r\n2. Add an environment variable named `JAVA8_HOME` points to **JDK 8 / JRE 8**  installation/home directory.\r\n\r\n3. Compile with maven.\r\n   `mvn clean install`\r\n\r\n3. Installation\r\n=======\r\n\r\nIn your `pom.xml`, you must add repository and dependency for **Jillegal**. \r\nYou can change `jillegal.version` to any existing **Jillegal** library version.\r\nLatest version is `2.0-SNAPSHOT`.\r\n\r\n~~~~~ xml\r\n...\r\n<properties>\r\n    ...\r\n    <jillegal.version>2.0-SNAPSHOT</jillegal.version>\r\n    ...\r\n</properties>\r\n...\r\n<dependencies>\r\n    ...\r\n\t<dependency>\r\n\t\t<groupId>tr.com.serkanozal</groupId>\r\n\t\t<artifactId>jillegal</artifactId>\r\n\t\t<version>${jillegal.version}</version>\r\n\t</dependency>\r\n\t...\r\n</dependencies>\r\n...\r\n<repositories>\r\n\t...\r\n\t<repository>\r\n\t\t<id>serkanozal-maven-repository</id>\r\n\t\t<url>https://github.com/serkan-ozal/maven-repository/raw/master/</url>\r\n\t</repository>\r\n\t...\r\n</repositories>\r\n...\r\n~~~~~\r\n\r\n4. Usage\r\n=======\r\n\r\nTo initialize Jillegal and find Jillegal Aware classes, there are two ways:\r\n\r\n1) You just need to call explicitly making aware method at startup in anywhere of your application.\r\n\r\n~~~~~ java\r\n...\r\n\r\ntr.com.serkanozal.jillegal.Jillegal.init();\r\n\r\n...\r\n~~~~~\r\n\r\nor\r\n\r\n2) You can extend your main class from **`tr.com.serkanozal.jillegal.util.JillegalAware`** class.\r\n\r\n~~~~~ java\r\n...\r\n\r\npublic class JillegalDemo extends JillegalAware {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\r\n\t\t...\r\n\t\r\n\t}\r\n\t\r\n}\t\r\n\r\n...\r\n~~~~~\r\n\r\n4.1. Jillegal Aware OffHeap Pool\r\n-------\r\n\r\nTo make any of your class, just annotate it with **`tr.com.serkanozal.jillegal.config.annotation.JillegalAware`** annotation. So it will be detected by Jillegal on initialize cycle and will be instrumented automatically to be aware of Jillegal.\r\n\r\n~~~~~ java\r\npublic class SampleClassWrapper {\r\n\r\n\tprivate SampleClass sampleClass;\r\n\r\n\tpublic SampleClass getSampleClass() {\r\n\t\treturn sampleClass;\r\n\t}\r\n\r\n\tpublic void setSampleClass(SampleClass sampleClass) {\r\n\t\tthis.sampleClass = sampleClass;\r\n\t}\r\n\r\n}\r\n~~~~~\r\n\r\n~~~~~ java\r\n@JillegalAware\r\npublic class JillegalAwareSampleClassWrapper {\r\n\r\n\t@OffHeapObject\r\n\tprivate SampleClass sampleClass;\r\n\r\n\t@OffHeapArray(length = 1000)\r\n\tprivate SampleClass[] sampleClassArray;\r\n\r\n\tpublic SampleClass getSampleClass() {\r\n\t\treturn sampleClass;\r\n\t}\r\n\r\n\tpublic void setSampleClass(SampleClass sampleClass) {\r\n\t\tthis.sampleClass = sampleClass;\r\n\t}\r\n\r\n\tpublic SampleClass[] getSampleClassArray() {\r\n\t\treturn sampleClassArray;\r\n\t}\r\n\r\n\tpublic void setSampleClassArray(SampleClass[] sampleClassArray) {\r\n\t\tthis.sampleClassArray = sampleClassArray;\r\n\t}\r\n\r\n}\r\n~~~~~\r\n\r\n~~~~~ java\r\npublic class SampleClass {\r\n\r\n\tprivate int i1 = 5;\r\n\tprivate int i2 = 10;\r\n\tprivate int order;\r\n\tprivate SampleLinkClass link;\r\n\r\n\tpublic int getI1() {\r\n\t\treturn i1;\r\n\t}\r\n\r\n\tpublic int getI2() {\r\n\t\treturn i2;\r\n\t}\r\n\r\n\tpublic int getOrder() {\r\n\t\treturn order;\r\n\t}\r\n\r\n\tpublic void setOrder(int order) {\r\n\t\tthis.order = order;\r\n\t}\r\n\r\n\tpublic SampleLinkClass getLink() {\r\n\t\treturn link;\r\n\t}\r\n\r\n\tpublic void setLink(SampleLinkClass link) {\r\n\t\tthis.link = link;\r\n\t}\r\n\t\r\n}\r\n~~~~~\r\n\r\n~~~~~ java\r\npublic class SampleLinkClass {\r\n\r\n\tprivate long linkNo;\r\n\r\n\tpublic long getLinkNo() {\r\n\t\treturn linkNo;\r\n\t}\r\n\r\n\tpublic void setLinkNo(long linkNo) {\r\n\t\tthis.linkNo = linkNo;\r\n\t}\r\n\t\r\n}\r\n~~~~~\r\n\r\n~~~~~ java\r\n\r\nJillegalAwareSampleClassWrapper sampleClassWrapper = new JillegalAwareSampleClassWrapper();\r\n\r\nsampleClassWrapper.getSampleClass().setOrder(-1);\r\n\r\nSampleClass[] objArray = sampleClassWrapper.getSampleClassArray();\r\n    \t\r\nfor (int i = 0; i < objArray.length; i++) {\r\n    \tSampleClass obj = objArray[i];\r\n    \tobj.setOrder(i);\r\n    \tSystem.out.println(\"Order value of auto injected off-heap object field has been set to \" + i);\r\n}\r\n\r\nSystem.out.println(\"Order value of sample object at off heap pool: \" + \r\nsampleClassWrapper.getSampleClass().getOrder());\r\n    \t\r\nfor (int i = 0; i < objArray.length; i++) {\r\n    \tSampleClass obj = objArray[i];\r\n    \tSystem.out.println(\"Order value of \" + i + \". object at off heap pool: \" + obj.getOrder());\r\n}\r\n\r\n~~~~~\r\n\r\n4.2. Eager Referenced Object OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nObjectOffHeapPoolCreateParameterBuilder<SampleClass> offHeapPoolParameterBuilder = \r\n\t\t\t\tnew ObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\ttype(SampleClass.class).\r\n\t\t\t\t\t\tobjectCount(ELEMENT_COUNT).\r\n\t\t\t\t\t\tmakeOffHeapableAsAuto(true).\r\n\t\t\t\t\t\treferenceType(ObjectPoolReferenceType.EAGER_REFERENCED);\r\nObjectOffHeapPoolCreateParameter<SampleClass> offHeapPoolParameter = offHeapPoolParameterBuilder.build();\r\nEagerReferencedObjectOffHeapPool<SampleClass> eagerReferencedObjectPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(offHeapPoolParameter);\r\nfor (int i = 0; i < ELEMENT_COUNT; i++) {\r\n\tSampleClass obj = eagerReferencedObjectPool.get();\r\n\t...\r\n}\r\n\r\n~~~~~\r\n\r\n4.3. Lazy Referenced Object OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nObjectOffHeapPoolCreateParameterBuilder<SampleClass> offHeapPoolParameterBuilder = \r\n\t\t\t\tnew ObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\ttype(SampleClass.class).\r\n\t\t\t\t\t\tobjectCount(ELEMENT_COUNT).\r\n\t\t\t\t\t\tmakeOffHeapableAsAuto(true).\r\n\t\t\t\t\t\treferenceType(ObjectPoolReferenceType.LAZY_REFERENCED);\r\nObjectOffHeapPoolCreateParameter<SampleClass> offHeapPoolParameter = offHeapPoolParameterBuilder.build();\r\nLazyReferencedObjectOffHeapPool<SampleClass> lazyReferencedObjectPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(offHeapPoolParameter);\r\nfor (int i = 0; i < ELEMENT_COUNT; i++) {\r\n\tSampleClass obj = lazyReferencedObjectPool.get();\r\n\t...\r\n}\r\n\r\n~~~~~\r\n\r\n4.4. Primitive Type Array OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nPrimitiveTypeArrayOffHeapPool<Integer, int[]> primitiveTypeArrayPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ArrayOffHeapPoolCreateParameterBuilder<Integer>().\r\n\t\t\t\t\t\t\t\ttype(Integer.class).\r\n\t\t\t\t\t\t\t\tlength(ELEMENT_COUNT).\r\n\t\t\t\t\t\t\t\tusePrimitiveTypes(true).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nint[] primitiveArray = primitiveTypeArrayPool.getArray();\r\n\r\nfor (int i = 0; i < primitiveArray.length; i++) {\r\n\tprimitiveArray[i] = i;\r\n}\r\n\r\n~~~~~\r\n\r\n4.5. Complex Type Array OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nComplexTypeArrayOffHeapPool<SampleClass, SampleClass[]> complexTypeArrayPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ArrayOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\t\t\ttype(SampleClass.class).\r\n\t\t\t\t\t\t\t\tlength(ELEMENT_COUNT).\r\n\t\t\t\t\t\t\t\tinitializeElements(true).\r\n\t\t\t\t\t\t\tbuild());\r\n\t\t\t\t\t\t\t\r\nSampleClass[] complexArray = complexTypeArrayPool.getArray();\r\n\r\nfor (int i = 0; i < complexArray.length; i++) {\r\n\tSampleClass obj = complexArray[i];\r\n\t...\r\n}\t\r\n\r\n~~~~~\r\n\r\n4.6. Extendable Eager Referenced Object OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nEagerReferencedObjectOffHeapPool<SampleClass> sequentialObjectPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\t\t\ttype(SampleClass.class).\r\n\t\t\t\t\t\t\t\tobjectCount(ELEMENT_COUNT).\r\n\t\t\t\t\t\t\t\treferenceType(ObjectPoolReferenceType.EAGER_REFERENCED).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nExtendableObjectOffHeapPool<SampleClass> extendableObjectPool =\r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ExtendableObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\t\t\tforkableObjectOffHeapPool(sequentialObjectPool).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nfor (int i = 0; i < TOTAL_ELEMENT_COUNT; i++) {\r\n\tSampleClass obj = extendableObjectPool.get();\r\n\t...\r\n}\t\r\n\r\n~~~~~\r\n\r\n4.7. Extendable Lazy Referenced Object OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nLazyReferencedObjectOffHeapPool<SampleClass> sequentialObjectPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\t\t\ttype(SampleClass.class).\r\n\t\t\t\t\t\t\t\tobjectCount(ELEMENT_COUNT).\r\n\t\t\t\t\t\t\t\treferenceType(ObjectPoolReferenceType.LAZY_REFERENCED).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nExtendableObjectOffHeapPool<SampleClass> extendableObjectPool =\r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ExtendableObjectOffHeapPoolCreateParameterBuilder<SampleClass>().\r\n\t\t\t\t\t\t\t\tforkableObjectOffHeapPool(sequentialObjectPool).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nfor (int i = 0; i < TOTAL_ELEMENT_COUNT; i++) {\r\n\tSampleClass obj = extendableObjectPool.get();\r\n\t...\r\n}\t\r\n\r\n~~~~~\r\n\r\n4.8. String OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nStringOffHeapPool stringPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew StringOffHeapPoolCreateParameterBuilder().\r\n\t\t\t\t\t\t\t\testimatedStringCount(STRING_COUNT).\r\n\t\t\t\t\t\t\t\testimatedStringLength(ESTIMATED_STRING_LENGTH).\r\n\t\t\t\t\t\t\tbuild());\r\n   \r\nfor (int i = 0; i < STRING_COUNT; i++) {\r\n\tSystem.out.println(stringPool.get(\"String \" + i));\r\n}\r\n    \t\r\n~~~~~\r\n\r\n4.9. Extendable String OffHeap Pool\r\n-------\r\n~~~~~ java\r\n\r\nOffHeapService offHeapService = OffHeapServiceFactory.getOffHeapService();\r\n\r\nDeeplyForkableStringOffHeapPool stringPool = \r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew StringOffHeapPoolCreateParameterBuilder().\r\n\t\t\t\t\t\t\t\testimatedStringCount(STRING_COUNT).\r\n\t\t\t\t\t\t\t\testimatedStringLength(ESTIMATED_STRING_LENGTH).\r\n\t\t\t\t\t\t\tbuild());\r\n   \r\nExtendableStringOffHeapPool extendableStringPool =\r\n\t\t\t\toffHeapService.createOffHeapPool(\r\n\t\t\t\t\t\tnew ExtendableStringOffHeapPoolCreateParameterBuilder().\r\n\t\t\t\t\t\t\t\tforkableStringOffHeapPool(stringPool).\r\n\t\t\t\t\t\t\tbuild());\r\n\r\nfor (int i = 0; i < TOTAL_STRING_COUNT; i++) {\r\n\tSystem.out.println(stringPool.get(\"String \" + i));\r\n}\r\n\r\n~~~~~\r\n\r\n4.10. Instrumentation Module\r\n-------\r\n~~~~~ java\r\n\r\npublic class SampleClass {\r\n\r\n\tpublic SampleClass() {\r\n\t\tSystem.out.println(\"SampleInstrumentClass.SampleClassToInstrument()\"); \r\n\t}\r\n\r\n\tpublic void methodToIntercept() {\r\n\t\tSystem.out.println(\"SampleInstrumentClass.methodToIntercept()\"); \r\n\t}\r\n\t\r\n}\r\n\r\n~~~~~\r\n\r\n~~~~~ java\r\n\r\nJillegal.init();\r\n\r\nSystem.out.println(\"Before Intrumentation: \");\r\nSystem.out.println(\"=====================================================\");\r\n\r\nSampleClass obj1 = new SampleClass();\r\nobj1.methodToIntercept();\r\n\r\nSystem.out.println(\"=====================================================\");\r\n\r\nSystem.out.println(\"After Intrumentation: \");\r\nSystem.out.println(\"=====================================================\");\r\n\r\nInstrumentService instrumentService = InstrumentServiceFactory.getInstrumentService();\r\nInstrumenter<SampleClass> inst = instrumentService.getInstrumenter(SampleClass.class);\r\nGeneratedClass<SampleClass> redefinedClass =\r\n\tinst.\r\n\t\tinsertBeforeConstructors(\r\n                    \tnew BeforeConstructorInterceptor<SampleClass>() {\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void beforeConstructor(SampleClass o, Constructor<SampleClass> c, Object[] args) {\r\n\t\t\t\t\tSystem.out.println(\"Intercepted by Jillegal before constructor ...\");\r\n\t\t\t\t}}).\r\n\r\n\t\tinsertAfterConstructors(\"System.out.println(\\\"Intercepted by Jillegal after constructor ...\\\");\").\r\n\r\n\t\tinsertBeforeMethod(\"methodToIntercept\", \r\n                    \tnew BeforeMethodInterceptor<SampleClass>() {\r\n\t\t\t\t@Override\r\n                    \t\tpublic void beforeMethod(SampleClass o, Method m, Object[] args) {\r\n\t\t\t\t\tSystem.out.println(\"Intercepted by Jillegal before methodToIntercept method ...\");\r\n\t\t\t\t}}).\r\n\r\n\t\tinsertAfterMethod(\"methodToIntercept\", \r\n\t\t\t\"System.out.println(\\\"Intercepted by Jillegal after methodToIntercept method ...\\\");\").\r\n                    \t\t\t\r\n\tbuild();\r\n\r\ninstrumentService.redefineClass(redefinedClass); \r\n\r\nSampleClass obj2 = new SampleClass();\r\nobj2.methodToIntercept();\r\n        \r\nSystem.out.println(\"=====================================================\");\r\n\r\n~~~~~\r\n\r\n5. Roadmap\r\n=======\r\n\r\n* On the fly in memory compiler support under **Compiler module** for Java and Groovy lamguages under.\r\n\r\n* Java 6 / Java 7 support for OffHeap module.\r\n","google":"UA-39596978-1","note":"Don't delete this file! It's used internally to help with page regeneration."}